#!/usr/bin/env bash
set -euo pipefail

if [[ -z "${BASH_SOURCE[0]:-}" ]]; then
  echo "This script must be executed, not sourced." >&2
  exit 1
fi

REPO_ROOT=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
SCRIPT_PATH="$REPO_ROOT/Volume-wheel"

if [[ ! -f "$SCRIPT_PATH" ]]; then
  echo "Cannot find Volume-wheel script in $REPO_ROOT" >&2
  exit 1
fi

command -v python3 >/dev/null 2>&1 || {
  echo "python3 is required." >&2
  exit 1
}

if ! python3 - <<'PY' >/dev/null 2>&1
import importlib.util
import sys
sys.exit(0 if importlib.util.find_spec('evdev') else 1)
PY
then
  echo "Installing python-evdev for the current user..."
  python3 -m pip install --user evdev
fi

list_devices() {
  local pattern=$1
  local matches
  shopt -s nullglob
  matches=($pattern)
  shopt -u nullglob
  if ((${#matches[@]} == 0)); then
    return 0
  fi
  printf '%s\n' "${matches[@]}" | sort
}

prompt_device() {
  local kind=$1
  local pattern=$2

  mapfile -t candidates < <(list_devices "$pattern")

  if ((${#candidates[@]} == 0)); then
    echo "No $kind devices found matching $pattern" >&2
    read -rp "Enter the full path to the $kind device: " custom
    echo "$custom"
    return
  fi

  echo "Select the $kind device you want to use:" >&2
  local options=(${candidates[@]} "Enter a custom path")
  select choice in "${options[@]}"; do
    if [[ -n "${choice}" ]]; then
      if [[ "$choice" == "Enter a custom path" ]]; then
        read -rp "Enter the full path: " custom
        echo "$custom"
      else
        echo "$choice"
      fi
      break
    fi
  done
}

ensure_device_exists() {
  local path=$1
  if [[ ! -e "$path" ]]; then
    echo "Device '$path' does not exist." >&2
    exit 1
  fi
}

mouse_symlink=$(prompt_device "mouse" "/dev/input/by-id/*-event-mouse")
ensure_device_exists "$mouse_symlink"
keyboard_symlink=$(prompt_device "keyboard" "/dev/input/by-id/*-event-kbd")
ensure_device_exists "$keyboard_symlink"

mouse_base=${mouse_symlink%-event-mouse}
mapfile -t guessed_extra < <(list_devices "${mouse_base}-if*-event-kbd")
extras_default=""
if ((${#guessed_extra[@]} > 0)); then
  echo "Detected auxiliary interfaces that may emit Alt:" >&2
  printf '  %s\n' "${guessed_extra[@]}" >&2
  extras_default=$(IFS=:; echo "${guessed_extra[*]}")
fi

echo "Known auxiliary interfaces that may emit Alt (optional):" >&2
list_devices "/dev/input/by-id/*-if*-event-kbd" | sed 's/^/  /' >&2 || true

if [[ -n "$extras_default" ]]; then
  read -rp "Enter extra device paths (colon-separated) [${extras_default}]: " extra_paths
  if [[ -z "$extra_paths" ]]; then
    extra_paths=$extras_default
  fi
else
  read -rp "Enter extra device paths (colon-separated) or press Enter for none: " extra_paths
fi

mouse_real=$(readlink -f "$mouse_symlink")
keyboard_real=$(readlink -f "$keyboard_symlink")
if [[ -z "$mouse_real" || -z "$keyboard_real" ]]; then
  echo "Failed to resolve device paths." >&2
  exit 1
fi

get_input_dir() {
  local device=$1
  local devpath
  devpath=$(udevadm info --query=property --name "$device" | grep '^DEVPATH=' | cut -d= -f2)
  echo "/sys${devpath%/*}"
}

mouse_input_dir=$(get_input_dir "$mouse_real")
mouse_phys=$(sudo cat "$mouse_input_dir/phys")
mouse_name=$(sudo cat "$mouse_input_dir/name")

if [[ -z "$mouse_phys" ]]; then
  echo "Could not determine mouse phys attribute." >&2
  exit 1
fi

virtual_phys="volume-wheel/${mouse_phys}"
virtual_phys_hwdb=${virtual_phys//:/\x3a}

HWDB_FILE="/etc/udev/hwdb.d/90-volume-wheel.hwdb"

sudo tee "$HWDB_FILE" >/dev/null <<HWDB
# Volume wheel virtual mouse alignment
# Generated by install.sh
evdev:name:${mouse_name}:phys:${virtual_phys_hwdb}:serial:*noserial*:
  MOUSE_DPI=1200@1000 *2400@1000 3200@1000 6400@1000
  LIBINPUT_ACCEL_PROFILE=flat
  LIBINPUT_ACCEL_SPEED=0.0
HWDB

echo "Reloading hwdb..."
sudo systemd-hwdb update
sudo udevadm trigger --subsystem-match=input

MODULES_CONF="/etc/modules-load.d/volume-wheel.conf"
if ! grep -q '^uinput$' "$MODULES_CONF" 2>/dev/null; then
  echo "Ensuring uinput loads at boot..."
  printf 'uinput\n' | sudo tee "$MODULES_CONF" >/dev/null
fi

echo "Loading uinput kernel module..."
sudo modprobe uinput

group_added=0
if ! id -nG "$USER" | grep -qw input; then
  echo "Adding $USER to input group (requires logout/login)..."
  sudo usermod -aG input "$USER"
  group_added=1
fi

service_dir="$HOME/.config/systemd/user"
mkdir -p "$service_dir"
service_file="$service_dir/volume-wheel.service"

cat >"$service_file" <<SERVICE
[Unit]
Description=Volume wheel helper
After=graphical-session.target

[Service]
Type=simple
Environment="VOLUME_WHEEL_MOUSE_PATH=${mouse_symlink}"
Environment="VOLUME_WHEEL_KEYBOARD_PATH=${keyboard_symlink}"
Environment="VOLUME_WHEEL_EXTRA_PATHS=${extra_paths}"
ExecStart=/usr/bin/env python3 ${SCRIPT_PATH}
Restart=on-failure

[Install]
WantedBy=default.target
SERVICE

systemctl --user daemon-reload

if (( group_added )); then
  echo "You were added to the input group. Please log out and log back in before starting the service."
else
  read -rp "Start volume-wheel.service now? [Y/n] " start_now
  if [[ -z "$start_now" || "$start_now" =~ ^[Yy]$ ]]; then
    systemctl --user enable --now volume-wheel.service
  else
    systemctl --user enable volume-wheel.service
    echo "Service enabled. Start it later with: systemctl --user start volume-wheel.service"
  fi
fi

echo "Installation complete."
echo "Mouse:    $mouse_symlink"
echo "Keyboard: $keyboard_symlink"
if [[ -n "$extra_paths" ]]; then
  echo "Extra:    $extra_paths"
fi

echo "Log out/in if group membership changed, then verify the service with: systemctl --user status volume-wheel.service"
